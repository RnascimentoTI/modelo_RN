// Seleciona os elementos do formulário.
const form = document.querySelector("form");
const amount = document.getElementById("amount");
const expense = document.getElementById("expense");
const category = document.getElementById("category");

// Seleciona os elementos da lista
const expenseList = document.querySelector("ul");
const expensesQuantity = document.querySelector("aside header p span");

// Captura o evento de input e permite apenas números inteiros
amount.oninput = () => {
  let value = amount.value.replace(/\D/g, ""); // remove tudo que não for dígito
  amount.value = value;
};

// Captura o evento de submit do formulário
form.onsubmit = (event) => {
  event.preventDefault();

  const newExpense = {
    id: new Date().getTime(),
    expense: expense.value,
    category_id: category.value,
    category_name: category.options[category.selectedIndex].text,
    amount: amount.value,
    created_at: new Date(),
  };

<<<<<<< HEAD
body {
  width: 100%;
  height: 100vh;
  background-color: #e4ece9;
  display: flex;
  flex-direction: column;
  align-items: center;
  color: #1f2523;
}

.logo {
  height: 180px;
  margin-left: 0px;
  margin-bottom: .5px;
}

.logo:hover {
  transform: scale(1.1);
  transition: 0.3s;
}
=======
  expenseAdd(newExpense);
};

// Adiciona um novo item na lista
function expenseAdd(newExpense) {
  try {
    const expenseItem = document.createElement("li");
    expenseItem.classList.add("expense");

    const expenseIcon = document.createElement("img");
    expenseIcon.setAttribute("src", `img/${newExpense.category_id}.svg`);
    expenseIcon.setAttribute("alt", newExpense.category_name);

    const expenseInfo = document.createElement("div");
    expenseInfo.classList.add("expense-info");

    const expenseName = document.createElement("strong");
    expenseName.textContent = newExpense.expense;

    const expenseCategory = document.createElement("span");
    expenseCategory.textContent = newExpense.category_name;

    expenseInfo.append(expenseName, expenseCategory);
>>>>>>> 3d69e43b4b9ba041327804add2fb7b2b4700c0af

    const expenseAmount = document.createElement("span");
    expenseAmount.classList.add("expense-amount");
    expenseAmount.textContent = parseInt(newExpense.amount);

<<<<<<< HEAD
form {
  background-color: #f9fbfa;
  border-radius: 1rem;
  padding: 2.5rem;
  max-width: 462px;
  display: flex;
  flex-direction: column;
}

form h1 {
  font-size: 1.25rem;
}

form p {
  font-size: 0.87rem;
  color: #4d5c57;
  margin: 0.75rem 0 2.5rem;
}

fieldset {
  border: none;
  display: flex;
}

fieldset legend {
  text-transform: uppercase;
  font-size: 0.62rem;
  color: #4d5c57;
  margin-bottom: 0.5rem;
}

fieldset:focus-within legend {
  color: #1f8459;
  font-weight: 700;
}

input,
select {
  flex: 1;
  height: 3rem;
  border-radius: 0.5rem;
  border: 1px solid #cdd5d2;
  padding: 0 1rem;
  font-size: 0.87rem;
  color: #1f2523;
  background-color: transparent;
  outline: none;
}

select {
  appearance: none;
  background-image: url(img/chevron-down.svg);
  background-repeat: no-repeat;
  background-position: right 0.7rem top 50%;
  background-size: 1.25rem auto;
}

input::placeholder,
select:invalid {
  color: #4d5c57;
}

input:focus,
select:focus {
  border: 1.5px solid #1f8459;
}

.inputs-row {
  display: flex;
  flex: 1;
  gap: 1rem;
  margin-top: 1rem;
}

.inputs-row fieldset:first-child {
  flex: 1;
}

.inputs-row fieldset:last-child input {
  max-width: 154px;
}

form button {
  height: 3rem;
  border-radius: 0.5rem;
  border: none;
  font-size: 16px;
  color: #ffffff;
  background-color: #1f8459;
  font-weight: 700;
  padding: 1rem 1.25rem;
  cursor: pointer;
  transition: background-color 0.2s;
}

button:hover {
  background-color: #2cb178;
  transform: scale(1.1);
  transition: 0.3s;
}

form button:last-child {
  margin-top: 2rem;
}

/* ✅ Botão de Enviar fixo e responsivo */
#sendButton {
  position: fixed;
  top: 20px;
  right: 20px;
  padding: 10px 20px;
  background-color: #1f8459;
  color: white;
  border: none;
  border-radius: 5px;
  font-size: 16px;
  font-weight: 700;
  cursor: pointer;
  z-index: 999;
  transition: background-color 0.3s, transform 0.3s;
}

#sendButton:hover {
  background-color: #2cb178;
  transform: scale(1.05);
}

/* Responsivo: Ajusta o botão no mobile */
@media (max-width: 620px) {
  #sendButton {
    top: 10px;
    right: 10px;
    padding: 8px 16px;
    font-size: 14px;
  }
}


aside {
  background-color: #f9fbfa;
  border-radius: 1rem;
  padding: 2.5rem;
  max-width: 462px;
  min-width: 600px;
}

aside header {
  display: flex;
  justify-content: space-between;
  border-bottom-width: 1px;
  border-bottom-style: solid;
  border-bottom-color: #e4ece9;
  padding-bottom: 1.5rem;
  margin-bottom: 1.5rem;
}

aside header p {
  color: #4d5c57;
  font-weight: 400;
  font-size: 1rem;
}

aside header p span {
  color: #4d5c57;
  font-weight: 400;
  font-size: 0.87rem;
}

aside header p i {
  color: #cdd5d2;
  margin: 0 0.5rem;
  font-style: normal;
}

aside header h2 {
  font-size: 1rem;
  color: #1f2523;
}

aside header small {
  color: #4d5c57;
  font-weight: 400;
  font-size: 0.75rem;
  margin-right: 0.25rem;
}

aside ul {
  list-style: none;
  display: flex;
  flex-direction: column;
  gap: 1rem;
  max-height: 310px;
  min-height: 310px;
  overflow-y: scroll;
}

.expense {
  display: flex;
  align-items: center;
  height: 38px;
}

.expense img:first-child {
  width: 2rem;
  height: 2rem;
  margin-right: 0.75rem;
}

.expense > div {
  display: flex;
  flex-direction: column;
  flex: 1;
}

.expense-info strong {
  font-size: 0.87rem;
  color: #1f2523;
}

.expense-info span {
  font-size: 0.75rem;
  color: #4d5c57;
}

.expense-amount {
  font-size: 0.87rem;
  color: #1f2523;
  font-weight: 600;
}

.expense-amount small {
  font-size: 0.75rem;
  color: #4d5c57;
  font-weight: 400;
  margin-right: 0.25rem;
}

.remove-icon {
  height: 1rem;
  margin-left: 0.5rem;
  cursor: pointer;
  transition: opacity 0.2s;
}

.remove-icon:hover {
  opacity: 0.7;
}

/* Outras responsividades */
@media (min-width: 1100px) {
  form {
    max-height: 428px;
  }
}

@media (max-width: 1100px) {
  :root {
    font-size: 14px;
  }

  main,
  aside {
    min-width: 100%;
  }

  main section {
    flex-direction: column;
    width: 100%;
    padding: 1.5rem;
  }

  main section form {
    min-width: 100%;
  }

  main section aside ul {
    width: 100%;
    height: auto;
    overflow: auto;
  }
=======
    const removeIcon = document.createElement("img");
    removeIcon.setAttribute("src", "img/remove.svg");
    removeIcon.setAttribute("alt", "remover");
    removeIcon.classList.add("remove-icon");

    expenseItem.append(expenseIcon, expenseInfo, expenseAmount, removeIcon);
    expenseList.append(expenseItem);

    formClear();
    updateQuantity();
  } catch (error) {
    alert("Não foi possível adicionar o material.");
    console.log(error);
  }
}

// Atualiza somente a quantidade de Materiais
function updateQuantity() {
  const items = expenseList.children;
  expensesQuantity.textContent = `${items.length} ${items.length > 1 ? "Materiais" : "Material"}`;
>>>>>>> 3d69e43b4b9ba041327804add2fb7b2b4700c0af
}

// Evento que captura o clique nos itens da lista
expenseList.addEventListener("click", function (event) {
  if (event.target.classList.contains("remove-icon")) {
    const item = event.target.closest(".expense");
    item.remove();
  }
  updateQuantity();
});

// Limpa o formulário
function formClear() {
  expense.value = "";
  // category.value = "";
  amount.value = "";
  expense.focus();
}

// Enviar os dados para o Formcarry quando o botão Enviar for clicado
const sendButton = document.getElementById("sendButton");
sendButton.addEventListener("click", function () {
  const items = expenseList.children;
  const materiais = [];

  for (let item of items) {
    const material = {
      descricao: item.querySelector("strong").textContent,
      setor: item.querySelector("span").textContent,
      quantidade: item.querySelector(".expense-amount").textContent,
    };
    materiais.push(material);
  }

  // Formatando o corpo da requisição
  const data = new FormData();
  // Adicionando um campo para os materiais
  materiais.forEach((material, index) => {
    data.append(`material[${index}][descricao]`, material.descricao);
    data.append(`material[${index}][setor]`, material.setor);
    data.append(`material[${index}][quantidade]`, material.quantidade);
  });

  // Enviar os dados para o Formcarry
  fetch("https://formcarry.com/s/CQCMWqykwZZ", {
    method: "POST",
    body: data,
  })
    .then((response) => {
      if (response.ok) {
        alert("Materiais enviados com sucesso!");
      } else {
        throw new Error("Erro ao enviar. Código: " + response.status);
      }
    })
    .catch((error) => {
      alert("Falha ao enviar materiais.");
      console.error(error);
    });
});

